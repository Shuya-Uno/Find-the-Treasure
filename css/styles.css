
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --map-width: 1280px;
  --map-height: 1280px;
}
/* Define map-width and map-hight with custom properties

   :root is the eqivalent to <html> DOM object; setting property here
    lets us inherit any value to all descendants

   Since custom properties are like variables, inheritance only
    happens when called
*/

body {
  background-color: black;
  color: white;

  font-size: 20px;
}

body:hover {
  cursor: default;
}

#page-container {
  display: flex;
  justify-content: center;
  align-items: center;
  /* Centering content with flex*/

  height: 100vh;
  /* Vertical centering made available by vh (viewport unit)
      (simply setting to 100% didn't work)*/
}

.absolute {
  position: absolute;
}

#border {
  border: 1px solid blue;
  width: 800px;
  height: 468px;

  overflow: hidden;
  /*
    Limits visible area to inside the game screen
     by overflow: hidden
      (Prevents overflow of game objects.
       Provides game-screen-like experience)
  */

  border-radius: 10px;
}

.map {
  background: url("../images/dark-green-background.png");
  background-repeat: no-repeat;
  width: var(--map-width);
  height: var(--map-height);
}
/* Accesses custom properties with var()*/


#map2 {
  top: calc(var(--map-height) * -1);
}
/* For setting negative value, uses the calc() and multiplies -1*/


#map3 {
  top: calc(var(--map-height) * -1);
  left: var(--map-width);
}

#map4 {
  left: var(--map-width);
}

#map5 {
  top: var(--map-height);
  left: var(--map-width);
}

#map6 {
  top: var(--map-height);
}

#map7 {
  top: var(--map-height);
  left: calc(var(--map-width) * -1);
}

#map8 {
  left: calc(var(--map-width) * -1);
}

#map9 {
  top: calc(var(--map-height) * -1);
  left: calc(var(--map-width) * -1);
}

.on-map {
  width: 60px;
  height: 60px;

  transition: background-color 0.125s;
  /* Ease the immediate change of color with transition*/
}

#hero {
  background-color: red;
  left: 354px;
  top: 226px;
}

#enemy {
  background-color: blue;
  left: -150px;
  top: -150px;
}

#tree {
  background-color: green;
  left: 400px;
  top: 400px;
}

#goal {
  background-color: orange;
  left: 1600px;
  top: -400px;
}

.clickable {
  transition: color 0.125s;
}

.clickable:hover {
  cursor: pointer;
  /*
     Implicitly tell the user that clicking the button
      makes you proceed, by making the cursor pointer on-hover
  */

  color: blue;
}

#start-box,
#instruction-wrapper {
  display: flex;
  flex-direction: column;

  width: 100%;
  height: 100%;
}

#start-box {
  align-items: flex-end;
  /* display: none; */
}

#music-button {
  display: flex;
  justify-content: center;
  align-items: center;

  width: 1em;
  height: 1em;

  z-index: 1;
  top: 15px;
  right: 20px;
  background-color: rgba(0,0,0,0.4);
  border-radius: 1em;

  transition: color 0.125s;
}

/* #music-on:hover {
  color: #fff;
} */

#title,
#play-from-start,
#instruction-link {
  width: fit-content;
  padding: 0 10px 0 10px;

  background-color: rgba(0,0,0,0.4);
}

#title {
  margin-top: 70px;
  border-radius: 5px 0 0 5px;
}

#command-start {
  width: 50%;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;

  margin-top: 30px;
}

#play-from-start {
  border-radius: 5px 5px 0 0;
}

#instruction-link {
  border-radius: 0 5px 5px 5px;
}

#instruction-wrapper {
  background-color: rgba(0,0,0,0.4);
  display: none;
}

#instruction-content {
  margin: 60px 0 0 30px;
}

#instruction-header {
}

#instruction-list {
  margin: 1em 0 0 1.5em;
}

#command-instruction {
  bottom: 12px;
  right: 17px;
}

.inline {
  display: inline;
}

#back {
  margin-right: 15px;
}
